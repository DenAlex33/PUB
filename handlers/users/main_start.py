from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart

from keyboards.inline import *
from filters import IsWork, IsUser
from filters.all_filters import IsBuy
from keyboards.default import check_user_out_func
from loader import dp, bot
from states import StorageUsers
from utils.db_api.sqlite import *
from utils.other_func import clear_firstname, get_dates
from data.config import admin_for_logs
prohibit_buy = ["xbuy_item", "not_buy_items", "buy_this_item", "buy_open_position", "back_buy_item_position",
                "buy_position_prevp", "buy_position_nextp", "buy_category_prevp", "buy_category_nextp",
                "back_buy_item_to_category", "buy_open_category"]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö
@dp.message_handler(IsWork(), state="*")
@dp.callback_query_handler(IsWork(), state="*")
async def send_work_message(message: types.Message, state: FSMContext):
    if "id" in message:
        await message.answer("üî¥ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.")
    else:
        await message.answer("<b>üî¥ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" –∏ –∫–æ–º–∞–Ω–¥—ã "/start"
@dp.message_handler(text="‚¨Ö –ù–∞ –≥–ª–∞–≤–Ω—É—é", state="*")
@dp.message_handler(CommandStart(), state="*")
async def bot_start(message: types.Message, state: FSMContext):
    arg = message.get_args()
    await state.finish()
    first_name = clear_firstname(message.from_user.first_name)
    get_user_id = get_userx(user_id=message.from_user.id)
    if get_user_id is None:
            if message.from_user.username is not None:
             await bot.send_message(admin_for_logs,text = f'<b>üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\nüë§ Username: <a href="tg://user?id={message.from_user.id}">{first_name}</a>\n'
                                          f'üÜî Telegram ID: {message.from_user.id}</b>')#–õ–æ–≥_–æ_–Ω–æ–≤–æ–º_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if get_user_id is None:
        if arg != "":
            aa = 0
            if message.from_user.username is not None:
             await bot.send_message(arg, text = f'<b><i>‚úÖ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! <a href="tg://user?id={message.from_user.id}">{first_name}</a>\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 2% —Å –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π!</i></b>')
            get_user_login = get_userx(user_login=message.from_user.username)#–õ–æ–≥_–æ_–Ω–æ–≤–æ–º_—Ä–µ—Ñ–µ—Ä–∞–ª–µ
            if get_user_login is None:
                add_userxref(message.from_user.id, message.from_user.username.lower(), first_name, 0, 0, get_dates(),aa,arg)
                conn = sqlite3.connect("data/botBD.sqlite")
                cursor = conn.cursor()
                cursor.execute(f"UPDATE storage_users SET refkol = refkol+1 WHERE user_id = {arg}")
                conn.commit()
            else:
                delete_userx(user_login=message.from_user.username)
                add_userxref(message.from_user.id, message.from_user.username.lower(), first_name, 0, 0, get_dates(),aa,arg)
                conn = sqlite3.connect("data/botBD.sqlite")
                cursor = conn.cursor()
                cursor.execute(f"UPDATE storage_users SET refkol = refkol+1 WHERE user_id = {arg}")
                conn.commit()
            if message.from_user.username is not None:
                add_userx(message.from_user.id, message.from_user.username.lower(), first_name, 0, 0, get_dates())
            else:
                delete_userx(user_login=message.from_user.username)
                add_userx(message.from_user.id, message.from_user.username.lower(), first_name, 0, 0, get_dates())
        else:
            add_userx(message.from_user.id, message.from_user.username, first_name, 0, 0, get_dates())
    else:
        if first_name != get_user_id[3]:
            update_userx(get_user_id[1], user_name=first_name)
        if message.from_user.username is not None:
            if message.from_user.username.lower() != get_user_id[2]:
                update_userx(get_user_id[1], user_login=message.from_user.username.lower())
    with open("main_menu.jpg", "rb") as file:#–¢—É—Ç_–≤—Å—Ç–∞–≤–∏—Ç—å_–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ä—Ç–∏–Ω–∫–∏_–¥–ª—è_–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        data = file.read()
    await message.answer_photo(photo=data, caption=f'<b>üëãüèª –ü—Ä–∏–≤–µ—Ç, <code>{message.from_user.first_name}</code>!\n\n'
                                                   f'üòé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–º—ã–π –ª—É—á—à–∏–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n\n',reply_markup=check_user_out_func(message.from_user.id))

# –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç—É –≤ –±–¥
@dp.message_handler(IsUser(), state="*")
@dp.callback_query_handler(IsUser(), state="*")
async def send_user_message(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.from_user.id,
                           "<b>üëÆüèª‚Äç‚ôÄÔ∏è –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n"
                           "‚ñ∂ –í–≤–µ–¥–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ /start")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫
@dp.message_handler(IsBuy(), text="üéÅ –ö—É–ø–∏—Ç—å", state="*")
@dp.message_handler(IsBuy(), state=StorageUsers.here_input_count_buy_item)
@dp.callback_query_handler(IsBuy(), text_startswith=prohibit_buy, state="*")
async def send_user_message(message, state: FSMContext):
    if "id" in message:
        await message.answer("üî¥ –ü–æ–∫—É–ø–∫–∏ –≤ –±–æ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã", True)
    else:
        await message.answer("<b>üî¥ –ü–æ–∫—É–ø–∫–∏ –≤ –±–æ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>")
