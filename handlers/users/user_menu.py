# - *- coding: utf- 8 - *-
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from keyboards.default import check_user_out_func, all_back_to_main_default
from keyboards.inline import *
from keyboards.inline.inline_page import *
from loader import dp, bot
from states.state_users import *
from utils.other_func import clear_firstname, get_dates
from data.config import admin_for_logs

# –†–∞–∑–±–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–µ—Ç–∞–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç –¢–ì
def split_messages(get_list, count):
    return [get_list[i:i + count] for i in range(0, len(get_list), count)]


#####################–î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–ò#################################

### –†–ï–§–ï–†–ê–õ–ö–ê ###

@dp.message_handler(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", state="*")
async def bot_start(message: types.Message, state: FSMContext):
    with open("ref.jpg", "rb") as file: #–¢—É—Ç_–≤—Å—Ç–∞–≤–∏—Ç—å_–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ä—Ç–∏–Ω–∫–∏_–¥–ª—è_—Ä–µ—Ñ–∫–∏
        data = file.read()
        me = await bot.get_me()
        clear_address = InlineKeyboardMarkup()
        clear_address.add(InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å", callback_data="close"))
    await message.answer_photo(photo=data, caption=f"<b><i>üíô –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üíô\n\n"
                        f"üîó –°—Å—ã–ª–∫–∞: \n"
                        f"<code>https://t.me/{me.username}?start={message.from_user.id}</code>\n\n"
                        f"üìò –ù–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—à—å –¥–∞–≤–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ 2% —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–µ</i></b>", reply_markup=clear_address)


@dp.callback_query_handler(text='close')
async def get_my_address(call: CallbackQuery, state: FSMContext):
    await call.message.delete()

### ###

#################################

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@dp.message_handler(text="üõç –¢–æ–≤–∞—Ä—ã", state="*")
async def show_search(message: types.Message, state: FSMContext):
    await state.finish()
    get_categories = get_all_categoriesx()
    if len(get_categories) >= 1:
        get_kb = buy_item_open_category_ap(0)
        await message.answer("<b>ü§î –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", reply_markup=get_kb)
    else:
        await message.answer("<b>üò• –¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</b>")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message_handler(text="üëÆüèª‚Äç‚ôÄÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", state="*")
async def show_profile(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(get_user_profile(message.from_user.id), reply_markup=open_profile_inl)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "FAQ"
@dp.message_handler(text="üìï –ü—Ä–∞–≤–∏–ª–∞", state="*")
async def show_my_deals(message: types.Message, state: FSMContext):
    await state.finish()
    get_settings = get_settingsx()
    send_msg = get_settings[1]
    if "{username}" in send_msg:
        send_msg = send_msg.replace("{username}", f"<b>{message.from_user.username}</b>")
    if "{user_id}" in send_msg:
        send_msg = send_msg.replace("{user_id}", f"<b>{message.from_user.id}</b>")
    if "{firstname}" in send_msg:
        send_msg = send_msg.replace("{firstname}", f"<b>{clear_firstname(message.from_user.first_name)}</b>")
    clear_address = InlineKeyboardMarkup()
    clear_address.add(InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))
    await message.answer(send_msg, disable_web_page_preview=True, reply_markup=clear_address)

@dp.callback_query_handler(text='close')
async def get_my_address(call: CallbackQuery, state: FSMContext):
    await call.message.delete()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.message_handler(text="‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", state="*")
async def show_contact(message: types.Message, state: FSMContext):
    await state.finish()
    get_settings = get_settingsx()
    clear_address = InlineKeyboardMarkup()
    clear_address.add(InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))
    await message.answer(get_settings[0], disable_web_page_preview=True, reply_markup=clear_address)

@dp.callback_query_handler(text='close')
async def get_my_address(call: CallbackQuery, state: FSMContext):
    await call.message.delete()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"
@dp.callback_query_handler(text="my_buy", state="*")
async def show_referral(call: CallbackQuery, state: FSMContext):
    last_purchases = last_purchasesx(call.from_user.id)
    if len(last_purchases) >= 1:
        await call.message.delete()
        count_split = 0
        save_purchases = []
        for purchases in last_purchases:
            save_purchases.append(f"<b>üìÉ –ß–µ–∫:</b> <code>#{purchases[4]}</code>\n"
                                  f"‚ñ∂ {purchases[9]} | {purchases[5]}—à—Ç | {purchases[6]}—Ä—É–±\n"
                                  f"üïú {purchases[13]}\n"
                                  f"<code>{purchases[10]}</code>")
        await call.message.answer("<b>üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫</b>\n"
                                  "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
        save_purchases.reverse()
        len_purchases = len(save_purchases)
        if len_purchases > 4:
            count_split = round(len_purchases / 4)
            count_split = len_purchases // count_split
        if count_split > 1:
            get_message = split_messages(save_purchases, count_split)
            for msg in get_message:
                send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(msg)
                await call.message.answer(send_message)
        else:
            send_message = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n".join(save_purchases)
            await call.message.answer(send_message)

        await call.message.answer(get_user_profile(call.from_user.id), reply_markup=open_profile_inl)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏")


################################################################################################
######################################### –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê #######################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_open_category", state="*")
async def open_category_for_buy_item(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    get_category = get_categoryx("*", category_id=category_id)
    get_positions = get_positionsx("*", category_id=category_id)

    get_kb = buy_item_item_position_ap(0, category_id)
    if len(get_positions) >= 1:
        await call.message.edit_text("<b>ü§ó –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–æ–≤–∞—Ä:</b>",
                                     reply_markup=get_kb)
    else:
        await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category[2]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")


# –í–µ—Ä–Ω—É—Ç—Å—å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="back_buy_item_to_category", state="*")
async def back_category_for_buy_item(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>ü§î –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
                                 reply_markup=buy_item_open_category_ap(0))


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_category_nextp", state="*")
async def buy_item_next_page_category(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>ü§ó –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=buy_item_next_page_category_ap(remover))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_category_prevp", state="*")
async def buy_item_prev_page_category(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>ü§ì –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=buy_item_previous_page_category_ap(remover))


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_position_nextp", state="*")
async def buy_item_next_page_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>‚ò∫Ô∏è –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=item_buy_next_page_position_ap(remover, category_id))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
@dp.callback_query_handler(text_startswith="buy_position_prevp", state="*")
async def buy_item_prev_page_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>ü§ó –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=item_buy_previous_page_position_ap(remover, category_id))


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="back_buy_item_position", state="*")
async def buy_item_next_page_position(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.delete()
    await call.message.answer("<b>ü§ó –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–æ–≤–∞—Ä:</b>",
                              reply_markup=buy_item_item_position_ap(remover, category_id))


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_open_position", state="*")
async def open_category_for_create_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])

    get_position = get_positionx("*", position_id=position_id)
    get_category = get_categoryx("*", category_id=category_id)
    get_items = get_itemsx("*", position_id=position_id)

    send_msg = f"<b>üßæ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:</b>\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"<b>üìú –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <code>{get_category[2]}</code>\n\n" \
               f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{get_position[2]}</code>\n" \
               f"<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{get_position[3]}—Ä—É–±</code>\n" \
               f"<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <code>{len(get_items)}—à—Ç</code>\n\n" \
               f"<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n" \
               f"{get_position[4]}\n"
    if len(get_position[5]) >= 5:
        await call.message.delete()
        await call.message.answer_photo(get_position[5],
                                        send_msg,
                                        reply_markup=open_item_func(position_id, remover, category_id))
    else:
        await call.message.edit_text(send_msg,
                                     reply_markup=open_item_func(position_id, remover, category_id))


# –í—ã–±–æ—Ä –∫–æ–ª-–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_this_item", state="*")
async def open_category_for_create_position(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])

    get_items = get_itemsx("*", position_id=position_id)
    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    if len(get_items) >= 1:
        if int(get_user[4]) >= int(get_position[3]):
            async with state.proxy() as data:
                data["here_cache_position_id"] = position_id
            await call.message.delete()
            await StorageUsers.here_input_count_buy_item.set()
            await call.message.answer(f"üì¶ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                                      f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                      f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]}—Ä—É–±</code>\n"
                                      f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]}—Ä—É–±</code>\n",
                                      reply_markup=all_back_to_main_default)
        else:
            await call.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
    else:
        await call.answer("üò≥ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª-–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.message_handler(state=StorageUsers.here_input_count_buy_item)
async def input_buy_count_item(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data["here_cache_position_id"]
    get_items = get_itemsx("*", position_id=position_id)
    get_position = get_positionx("*", position_id=position_id)
    get_user = get_userx(user_id=message.from_user.id)

    if message.text.isdigit():
        get_count = int(message.text)
        amount_pay = int(get_position[3]) * get_count
        if len(get_items) >= 1:
            if 1 <= get_count <= len(get_items):
                if int(get_user[4]) >= amount_pay:
                    await state.finish()
                    delete_msg = await message.answer("<b>üíô –¢–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.</b>",
                                                      reply_markup=check_user_out_func(message.from_user.id))

                    await message.answer(f"<b>üíô –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                         f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]}—Ä—É–±</code>\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"‚ñ∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_count}—à—Ç</code>\n"
                                         f"üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay}—Ä—É–±</code>",
                                         reply_markup=confirm_buy_items(position_id, get_count,
                                                                        delete_msg.message_id))
                else:
                    await message.answer(f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.</b>\n"
                                         f"<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                                         f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]}</code>\n"
                                         f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                         f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]}—Ä—É–±</code>\n",
                                         reply_markup=all_back_to_main_default)
            else:
                await message.answer(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n"
                                     f"<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                                     f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>\n"
                                     f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]}</code>\n"
                                     f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                     f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]}—Ä—É–±</code>\n",
                                     reply_markup=all_back_to_main_default)
        else:
            await state.finish()
            await message.answer("<b>üíô –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>",
                                 reply_markup=check_user_out_func(message.from_user.id))
    else:
        await message.answer(f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             f"<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                             f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>\n"
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user[4]}</code>\n"
                             f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                             f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <code>{get_position[3]}—Ä—É–±</code>\n",
                             reply_markup=all_back_to_main_default)


# –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="not_buy_items", state="*")
async def not_buy_this_item(call: CallbackQuery, state: FSMContext):
    message_id = call.data.split(":")[1]
    await call.message.delete()
    await bot.delete_message(call.message.chat.id, message_id)
    await call.message.answer("<b>‚úîÔ∏è –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–æ–≤.</b>",
                              reply_markup=check_user_out_func(call.from_user.id))


# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="xbuy_item:", state="*")
async def yes_buy_this_item(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    get_position = get_positionx("*", position_id=position_id)
    get_count = int(call.data.split(":")[2])
    amount_pay = int(get_position[3]) * get_count
    random_number = [random.randint(100000000, 999999999)]
    passwd = list("ABCDEFGHIGKLMNOPQRSTUVYXWZ")
    random.shuffle(passwd)
    random_char = "".join([random.choice(passwd) for x in range(1)])
    receipt = random_char + str(random_number[0])
    get_settings = get_settingsx()
    get_items = get_itemsx("*", position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    await bot.send_message(admin_for_logs,text = f'<b>üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href="tg://user?id={get_user[1]}">{get_user[3]}</a> <code>({get_user[1]})</code>\n \n\n–ö—É–ø–∏–ª —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n‚ûñ <code>{get_position[2]}</code>\n<b>–í –∫–æ–ª-–≤–µ:</b> <code>{get_count}</code>\n<b>–ù–∞ —Å—É–º–º—É:</b> <code>{amount_pay} —Ä—É–±.</code>\n\n<b>üìÉ–ß–µ–∫:</b> <code>#{receipt}</code>')
    delete_msg = await call.message.answer("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>")
    message_id = int(call.data.split(":")[3])

    await bot.delete_message(call.message.chat.id, message_id)
    await call.message.delete()

    if 1 <= int(get_count) <= len(get_items):
        if int(get_user[4]) >= amount_pay:
            save_items, send_count, split_len = buy_itemx(get_items, get_count)

            if split_len <= 50:
                split_len = 70
            elif split_len <= 100:
                split_len = 50
            elif split_len <= 150:
                split_len = 30
            elif split_len <= 200:
                split_len = 10
            else:
                split_len = 3
            
            if get_count != send_count:
                amount_pay = int(get_position[3]) * send_count
                get_count = send_count

            buy_time = get_dates()

            await bot.delete_message(call.from_user.id, delete_msg.message_id)

            if len(save_items) <= split_len:
                send_message = "\n".join(save_items)
                await call.message.answer(f"<b>üíô –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:</b>\n"
                                          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                          f"{send_message}")
            else:
                await call.message.answer(f"<b>üíô –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:</b>\n"
                                          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")

                save_split_items = split_messages(save_items, split_len)
                for item in save_split_items:
                    send_message = "\n".join(item)
                    await call.message.answer(send_message)
            save_items = "\n".join(save_items)

            add_purchasex(call.from_user.id, call.from_user.username, call.from_user.first_name,
                          receipt, get_count, amount_pay, get_position[3], get_position[1], get_position[2],
                          save_items, get_user[4], int(get_user[4]) - amount_pay, buy_time, int(time.time()))
            update_userx(call.from_user.id, balance=get_user[4] - amount_pay)
            await call.message.answer(f"<b>üíô –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã) ‚úÖ</b>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üìÉ –ß–µ–∫: <code>#{receipt}</code>\n"
                                      f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_position[2]}</code>\n"
                                      f"üì¶ –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_count}</code>\n"
                                      f"üíµ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <code>{amount_pay}—Ä—É–±</code>\n"
                                      f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href='tg://user?id={get_user[1]}'>{get_user[3]}</a> <code>({get_user[1]})</code>\n"
                                      f"üïú –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>",
                                      reply_markup=check_user_out_func(call.from_user.id))
        else:
            await call.message.answer("<b>‚ùó –ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>")
    else:
        await state.finish()
        await call.message.answer("<b>üíô –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>",
                                  check_user_out_func(call.from_user.id))
